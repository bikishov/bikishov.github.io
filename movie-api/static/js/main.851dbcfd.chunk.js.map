{"version":3,"sources":["components/Header.jsx","components/Movie.jsx","components/Search.jsx","components/App/index.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","console","log","poster","Poster","target","href","imdbID","Title","width","src","alt","title","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","type","onClick","preventDefault","search","App","loading","setLoading","movies","setMovies","errorMessage","setErrorMessage","useEffect","fetch","then","res","json","response","jsonResponse","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+JAQeA,G,KAPF,SAACC,GACZ,OACE,4BAAQC,UAAU,cAChB,4BAAKD,EAAME,SCkBFC,EAjBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChBC,QAAQC,IAAIF,GAEZ,IAAMG,EACY,QAAjBH,EAAMI,OANP,qGAMsDJ,EAAMI,OAC5D,OACC,yBAAKP,UAAU,SACd,uBAAGQ,OAAO,SAASC,KAAI,qCAAgCN,EAAMO,OAAtC,MACtB,4BAAKP,EAAMQ,OACX,6BACC,yBAAKC,MAAM,MAAMC,IAAKP,EAAQQ,IAAKX,EAAMY,SAE1C,+BAAKZ,EAAMa,KAAX,QCWWC,EA1BA,SAAAlB,GAAU,IAAD,EACemB,mBAAS,IADxB,mBAChBC,EADgB,KACHC,EADG,KAcvB,OACC,0BAAMpB,UAAU,UACf,2BACCqB,MAAOF,EACPG,SAf6B,SAAAC,GAC/BH,EAAeG,EAAEf,OAAOa,QAetBG,KAAK,SAEN,2BAAOC,QAZkB,SAAAF,GAC1BA,EAAEG,iBACF3B,EAAM4B,OAAOR,GAJbC,EAAe,KAcsBI,KAAK,SAASH,MAAM,aCwC5CO,EApDH,WAAO,IAAD,EACcV,oBAAS,GADvB,mBACTW,EADS,KACAC,EADA,OAEYZ,mBAAS,IAFrB,mBAETa,EAFS,KAEDC,EAFC,OAGwBd,mBAAS,MAHjC,mBAGTe,EAHS,KAGKC,EAHL,KAKhBC,qBAAU,WACRC,MARkB,kDASjBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJP,EAAUO,EAAKtB,QACfa,GAAW,QAEZ,IAkBH,OACA,yBAAK9B,UAAU,OACb,kBAAC,EAAD,CAAQC,KAAK,UACb,kBAAC,EAAD,CAAQ0B,OAnBK,SAACR,GACdW,GAAW,GACXI,EAAgB,MAChBE,MAAM,8BAAD,OAA+BjB,EAA/B,qBACJkB,MAAK,SAAAG,GAAQ,OAAIA,EAASD,UAC1BF,MAAK,SAAAI,GAC0B,SAA1BA,EAAaC,UACfV,EAAUS,EAAaxB,QACvBa,GAAW,KAEXI,EAAgBO,EAAaE,OAC7Bb,GAAW,UASf,uBAAG9B,UAAU,aAAb,yCACA,yBAAKA,UAAU,UAEX6B,IAAYI,EACV,4CACCA,EACH,yBAAKjC,UAAU,gBAAgBiC,GAE7BF,EAAOa,KAAI,SAACzC,EAAM0C,GAAP,OACT,kBAAC,EAAD,CAAOC,IAAKD,EAAO1C,MAAOA,UC1ClB4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,a","file":"static/js/main.851dbcfd.chunk.js","sourcesContent":["import React from 'react';\r\nconst Header=(props) =>{\r\n  return(\r\n    <header className='App-header'>\r\n      <h2>{props.text}</h2>\r\n    </header>\r\n  )\r\n}\r\nexport default Header","import React from \"react\";\r\n\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n\t\"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\r\n\r\nconst Movie = ({ movie }) => {\r\n\tconsole.log(movie);\r\n\r\n\tconst poster =\r\n\t\tmovie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n\treturn (\r\n\t\t<div className=\"movie\">\r\n\t\t\t<a target=\"_blank\" href={`https://www.imdb.com/title/${movie.imdbID}/`}>\r\n\t\t\t\t<h2>{movie.Title}</h2>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<img width=\"200\" src={poster} alt={movie.title} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>({movie.Year})</p>\r\n\t\t\t</a>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Movie;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Search = props => {\r\n\tconst [searchValue, setSearchValue] = useState(\"\");\r\n\r\n\tconst handleSearchInputChange = e => {\r\n\t\tsetSearchValue(e.target.value);\r\n\t};\r\n\tconst resetInputField = () => {\r\n\t\tsetSearchValue(\"\");\r\n\t};\r\n\tconst callSearchFunction = e => {\r\n\t\te.preventDefault();\r\n\t\tprops.search(searchValue);\r\n\t\tresetInputField();\r\n\t};\r\n\treturn (\r\n\t\t<form className=\"search\">\r\n\t\t\t<input\r\n\t\t\t\tvalue={searchValue}\r\n\t\t\t\tonChange={handleSearchInputChange}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t/>\r\n\t\t\t<input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default Search","import React, {\r\n  useEffect,\r\n  useState\r\n} from 'react';\r\nimport './App.css'\r\nimport Header from '../Header'\r\nimport Movie from '../Movie'\r\nimport Search from '../Search'\r\n\r\nconst MOVIE_API_URL = 'https://www.omdbapi.com/?s=man&apikey=64fd54a9'\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [movies, setMovies] = useState([])\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    fetch(MOVIE_API_URL)\r\n    .then(res => res.json())\r\n    .then(json => {\r\n      setMovies(json.Search);\r\n      setLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  const search = (searchValue) => {\r\n    setLoading(true)\r\n    setErrorMessage(null)\r\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=64fd54a9`)\r\n    .then(response => response.json())\r\n    .then(jsonResponse => {\r\n      if (jsonResponse.Response === \"True\") {\r\n        setMovies(jsonResponse.Search);\r\n        setLoading(false);\r\n      } else {\r\n        setErrorMessage(jsonResponse.Error);\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n  <div className=\"App\">\r\n    <Header text=\"Films\"/>\r\n    <Search search={search}/>\r\n    <p className='App-intro'>Sharing a few of our favourite movies</p>\r\n    <div className=\"movies\">\r\n      {\r\n        loading && !errorMessage?(\r\n          <span>loading...</span>\r\n        ): errorMessage ?(\r\n        <div className=\"errorMessage\">{errorMessage}</div>\r\n        ):(\r\n          movies.map((movie,index)=>(\r\n            <Movie key={index} movie={movie}/>\r\n          ))\r\n        )\r\n      }\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/index';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}